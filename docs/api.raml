#%RAML 1.0
---
title: Admin entrance-Out
baseUri: http://localhost:3000/app/v1/
version: v1 

traits:
  withAuthHeaders:
    headers:
      Authorization:
        description: Auth token with the credential returned with the default admin user
        type: string

/user_token:
  description: Token creation
  post:
      description: Create new token for user.
      body:
        application/json:
          example: |
            {
             "auth": {
                "email": "Admin@admin.com",
                "password": "1234"
              } 
            }
      responses:
        201:
          body:
            application/json:
              example: |
                {
                  "jwt": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1NjY5MjY0MTMsInN1YiI6MSwiZW1haWwiOiJBZG1pbkBhZG1pbi5jb20ifQ.AvlpUsZ1mF53XCU9VjNxR3lxHKe05gt2jsl56YRkhxI"
                }

/users:
  description: Users related endpoints / Must be admin
  post:
    is: [withAuthHeaders]
    description: Create new users
    body:
          application/json:
            example: |
              {
                "user": {
                    "name": "james1",
                    "email": "james1@gmail.com",
                    "password": "1234",
                    "admin": false,
                }
              }
    responses:
      200:
        body:
            application/json:
              example: |
                {
                  "user": {
                    "id": 2,
                    "name": "james1",
                    "email": "james1@gmail.com",
                    "password_digest": "$2a$12$oZq09XlozD19pcYlYwrEBe2/lr6Y2ETNgT.hW.uaFGUKdjDSWzqRS",
                    "admin": false,
                    "created_at": "2019-08-26T14:50:25.643Z",
                    "updated_at": "2019-08-26T14:50:25.643Z"
                }
  get:
    is: [withAuthHeaders]
    description: Retrieve all users
    responses:
      200:
        body:
          application/json:
            example: |
              [
                {
                    "id": 1,
                    "name": "james",
                    "email": "james@gmail.com",
                    "password_digest": "$2a$12$oZq09XlozD19pcYlYwrEBe2/lr6Y2ETNgT.hW.uaFGUKdjDSWzqRS",
                    "admin": true,
                    "created_at": "2019-08-26T14:50:25.643Z",
                    "updated_at": "2019-08-26T14:50:25.643Z"
                }
                {
                    "id": 2,
                    "name": "james1",
                    "email": "james1@gmail.com",
                    "password_digest": "$2a$12$oZq09XlozD19pcYlYwrEBe2/lr6Y2ETNgT.hW.uaFGUKdjDSWzqRS",
                    "admin": false,
                    "created_at": "2019-08-26T14:50:25.643Z",
                    "updated_at": "2019-08-26T14:50:25.643Z"
                }
              ]

/users/{id}:
  description: Users related endpoints / Must be admin
  get:
    is: [withAuthHeaders]
    description: Retrieve specific user
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "user": {
                    "id": 2,
                    "name": "james1",
                    "email": "james1@gmail.com",
                    "password_digest": "$2a$12$oZq09XlozD19pcYlYwrEBe2/lr6Y2ETNgT.hW.uaFGUKdjDSWzqRS",
                    "admin": false,
                    "created_at": "2019-08-26T14:50:25.643Z",
                    "updated_at": "2019-08-26T14:50:25.643Z"
                }
              }
  patch:
    is: [withAuthHeaders]
    description: Update info user
    body:
        application/json:
          example: |
            {
              "user": {
                  "name": "james1",
                  "email": "james1@gmail.com",
                  "password": "1234",
                  "admin": true,
              }
            }
    responses:
      200:
        body:
          application/json:
                example: |
                  {
                    {
                    "id": 3,
                    "admin": false,
                    "password_digest": "$2a$12$quxPYsJZJJTMqnGgiTvgRetCpYTXB1.C9c6Nf/v9dXYcXmg5RVTQS",
                    "email": "jamesH@gmail.com",
                    "name": "james Hardvard",
                    "created_at": "2019-08-26T17:00:41.844Z",
                    "updated_at": "2019-08-26T17:43:42.379Z"
                    }
                  }

  delete:
        is: [withAuthHeaders]
        description: Delete existing user.
        responses:
          200:
            body:
              application/json:
                example: |
                  {
                    "message": "User Successfully deleted"
                  }

/time_records:
  post:  
      is: [withAuthHeaders]
      description: Create new time record for user
      body:
            application/json:
             example: |
                {
                  "time_record": {
                      "user_id": 2,
                      "date": "2019-08-26",
                      "entrance": "2019-08-26 08:57:25","output": "2019-08-26 12:57:25"
                  }
                }
      responses:
        200:
         body:
          application/json:
              example: |
                {
                  "id": 1,
                  "user_id": 2,
                  "date": "2019-08-26",
                  "entrance": "2019-08-26T08:57:25.000Z",
                  "output": "2019-08-26T12:57:25.000Z",
                  "created_at": "2019-08-26T15:05:18.023Z",
                  "updated_at": "2019-08-26T15:05:18.023Z"
                  }

  get:
    is: [withAuthHeaders]
    description: Retrieve all users
    responses:
      200:
        body:
          application/json:
            example: |
              [
                {
                    "id": 1,
                    "user_id": 2,
                    "date": "2019-08-26",
                    "entrance": "2019-08-26T08:57:25.000Z",
                    "output": "2019-08-26T12:57:25.000Z",
                    "created_at": "2019-08-26T15:50:29.925Z",
                    "updated_at": "2019-08-26T15:50:29.925Z"
                }
              ]

/time_records/{id}:
  description: Specific time record / Must be admin
  get:
    is: [withAuthHeaders]
    description: Retrieve specific time record with id
    responses:
      200:
        body:
          application/json:
            example: |
              [
                {
                    "id": 6,
                    "user_id": 2,
                    "date": "2019-08-22",
                    "entrance": "2019-08-22T08:57:25.000Z",
                    "output": "2019-08-22T12:57:25.000Z",
                    "created_at": "2019-08-26T17:25:12.483Z",
                    "updated_at": "2019-08-26T17:26:24.726Z"
                }
              ]
  delete:
        is: [withAuthHeaders]
        description: Delete existing time record.
        responses:
          200:
            body:
              application/json:
                example: |
                  {
                    "message": "Time record Succecfully deleted"
                  }
  patch:
    is: [withAuthHeaders]
    description: Update specific time record
    body:
        application/json:
          example: |
            {
              "time_record": {
                  "user_id": 2,
                  "date": "2019-08-22",
                  "entrance": "2019-08-22 08:57:25",
                  "output": "2019-08-22 12:57:25",
              }
            }
    responses:
      200:
        body:
          application/json:
                example: |
                  {
                    "id": 6,
                    "user_id": 2,
                    "date": "2019-08-22",
                    "entrance": "2019-08-22T08:57:25.000Z",
                    "output": "2019-08-22T12:57:25.000Z",
                    "created_at": "2019-08-26T17:25:12.483Z",
                    "updated_at": "2019-08-26T17:26:24.726Z"
                  }
    
    
/time_records/users/{user_id}:
  description: Retrieve all records from time record filtered with user id / Must be admin
  uriParameters:
    start_date:
      description: "Start date"
      required: false
      type: date
      example: 2019/08/20
    end_date:
      description: "End date"
      required: false
      type: date
      example: 2019/08/23
  get:
    is: [withAuthHeaders]
    description: Single records from user id filtered
    responses:
        200:
          body:
            application/json:
              example: |
                [
                  {
                    "id": 1,
                    "user_id": 2,
                    "date": "2019-08-26",
                    "entrance": "2019-08-26T08:57:25.000Z",
                    "output": "2019-08-26T12:57:25.000Z",
                    "created_at": "2019-08-26T15:50:29.925Z",
                    "updated_at": "2019-08-26T15:50:29.925Z"
                  }
                ]