#%RAML 1.0
---
title: Admin entrance-Out
baseUri: http://localhost:3000/app/v1/
version: v1 

traits:
  withAuthHeaders:
    headers:
      Authorization:
        description: Auth token with the credential returned with the default admin user
        type: string

/user_token:
  description: token creation
  post:
    description: create token for user already signed up
    responses:
      200:
        body:
          application/json:
           type: |
              {
                "auth": {
                  "email": "string",
                  "password": "string"
                } 
              }
            example: |
              {
                "jwt": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1NjY5MTc4NjgsInN1YiI6MSwiZW1haWwiOiJqYW1lc0BnbWFpbC5jb20ifQ.YDkzwlRq0AtRusJ4QGmBtVsgv1HnHRzV_GOmLFGw20M"
              }

/users:
  description: users related endpoints / Must be admin
  post:
    is: [withAuthHeaders]
    description: create new users
    responses:
      200:
        body:
          application/json:
           type: |
              {
              "user": {
                "name": "james1",
                "email": "james1@gmail.com",
                "password": "Pokemon43!",
                "admin": false
                }
              }
            example: |
              {
                "user": {
                    "id": 2,
                    "name": "james1",
                    "email": "james1@gmail.com",
                    "password_digest": "$2a$12$oZq09XlozD19pcYlYwrEBe2/lr6Y2ETNgT.hW.uaFGUKdjDSWzqRS",
                    "admin": false,
                    "created_at": "2019-08-26T14:50:25.643Z",
                    "updated_at": "2019-08-26T14:50:25.643Z"
                }
              }
  get:
    is: [withAuthHeaders]
    description: retrieve all users / Must be admin
    responses:
      200:
        body:
          application/json:
            example: |
              [
                {
                    "id": 1,
                    "name": "james",
                    "email": "james@gmail.com",
                    "password_digest": "$2a$12$oZq09XlozD19pcYlYwrEBe2/lr6Y2ETNgT.hW.uaFGUKdjDSWzqRS",
                    "admin": true,
                    "created_at": "2019-08-26T14:50:25.643Z",
                    "updated_at": "2019-08-26T14:50:25.643Z"
                }
                {
                    "id": 2,
                    "name": "james1",
                    "email": "james1@gmail.com",
                    "password_digest": "$2a$12$oZq09XlozD19pcYlYwrEBe2/lr6Y2ETNgT.hW.uaFGUKdjDSWzqRS",
                    "admin": false,
                    "created_at": "2019-08-26T14:50:25.643Z",
                    "updated_at": "2019-08-26T14:50:25.643Z"
                }
              ]
/users/{id}:
  get:
    is: [withAuthHeaders]
    description: retrieve specific user / Must be admin
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "user": {
                    "id": 2,
                    "name": "james1",
                    "email": "james1@gmail.com",
                    "password_digest": "$2a$12$oZq09XlozD19pcYlYwrEBe2/lr6Y2ETNgT.hW.uaFGUKdjDSWzqRS",
                    "admin": false,
                    "created_at": "2019-08-26T14:50:25.643Z",
                    "updated_at": "2019-08-26T14:50:25.643Z"
                }
              }
  patch:
    is: [withAuthHeaders]
        description: update info user / must be admin
        responses:
          200:
            body:
              application/json:
                type: |
                  {
                       "user": {
                        "name": "james1",
                        "email": "james1@gmail.com",
                        "password": "Pokemon43!",
                        "admin": false
                        }
                    }
                example: |
                  {
                    {
                    "id": 3,
                    "admin": false,
                    "password_digest": "$2a$12$quxPYsJZJJTMqnGgiTvgRetCpYTXB1.C9c6Nf/v9dXYcXmg5RVTQS",
                    "email": "jamesH@gmail.com",
                    "name": "james Hardvard",
                    "created_at": "2019-08-26T17:00:41.844Z",
                    "updated_at": "2019-08-26T17:43:42.379Z"
                    }
                  }

/time_records:
  post:  
      is: [withAuthHeaders]
      description: create new time record for user
      responses:
        200:
          body:
            application/json:
             type: |
                {
                  "time_record": {
                      "user_id": 2,
                      "date": "2019-08-26",
                      "entrance": "2019-08-26 08:57:25","output": "2019-08-26 12:57:25"
                  }
                }
              example: |
                {
                  "id": 1,
                  "user_id": 2,
                  "date": "2019-08-26",
                  "entrance": "2019-08-26T08:57:25.000Z",
                  "output": "2019-08-26T12:57:25.000Z",
                  "created_at": "2019-08-26T15:05:18.023Z",
                  "updated_at": "2019-08-26T15:05:18.023Z"
                  }

  get:
      is: [withAuthHeaders]
      description: retrieve all records from time record / Must be admin
      responses:
        200:
          body:
            application/json:
              example: |
              [
                {
                    "id": 1,
                    "user_id": 2,
                    "date": "2019-08-26",
                    "entrance": "2019-08-26T08:57:25.000Z",
                    "output": "2019-08-26T12:57:25.000Z",
                    "created_at": "2019-08-26T15:50:29.925Z",
                    "updated_at": "2019-08-26T15:50:29.925Z"
                }
            ]
/time_records/{id}:
  patch:
    is: [withAuthHeaders]
        description: update time record
        responses:
          200:
            body:
              application/json:
                type: |
                  {
                      "time_record": {
	                      	"user_id": 2,
	                      	"date": "2019-08-22",
	                      	"entrance": "2019-08-22 08:57:25",
	                      	"output": "2019-08-22 12:57:25"
	                      }
                    }
                example: |
                  {
                    "id": 6,
                    "user_id": 2,
                    "date": "2019-08-22",
                    "entrance": "2019-08-22T08:57:25.000Z",
                    "output": "2019-08-22T12:57:25.000Z",
                    "created_at": "2019-08-26T17:25:12.483Z",
                    "updated_at": "2019-08-26T17:26:24.726Z"
                    }
    delete:
        is: [withAuthHeaders]
        description: Delete existing time record.
        responses:
          200:
            body:
              application/json:
                example: |
                  {
                    "message": "Time record Succecfully deleted"
                  }
/time_records/users/{user_id}:
  get:
      is: [withAuthHeaders]
      description: retrieve all records from time record filtered with user id / Must be admin
      queryParameters:
        user_id:
          description: "id of user"
          required: true
          type: integer
          example: 2
      responses:
        200:
          body:
            application/json:
              example: |
              [
                {
                    "id": 1,
                    "user_id": 2,
                    "date": "2019-08-26",
                    "entrance": "2019-08-26T08:57:25.000Z",
                    "output": "2019-08-26T12:57:25.000Z",
                    "created_at": "2019-08-26T15:50:29.925Z",
                    "updated_at": "2019-08-26T15:50:29.925Z"
                }
            ]